/*--------------------------------------------------------------------------------
 _______________
|   /       \   | L   attice-based  | LeMonADE-Viewer:
|  /   ooo   \  | e   xtensible     | ----------------
| /  o\.|./o  \ | Mon te-Carlo      | An Open Source Visualization Tool for
|/  o\.\|/./o  \| A   lgorithm and  | for BFM-files generated by LeMonADE-software.
|  oo---0---oo  | D   evelopment    | See: https://github.com/LeMonADE-project/LeMonADE
|\  o/./|\.\o  /| E   nvironment    |
| \  o/.|.\o  / | -                 |
|  \   ooo   /  | Viewer            | Copyright (C) 2013-2015 by
|___\_______/___|                   | LeMonADE-Viewer Principal Developers (see AUTHORS)
----------------------------------------------------------------------------------

This file is part of LeMonADE-Viewer.

LeMonADE-Viewer is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

LeMonADE-Viewer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LeMonADE-Viewer.  If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------*/

#ifndef LEMONADE_VIEWER_FEATUREATTRIBUTECOLOR_H
#define LEMONADE_VIEWER_FEATUREATTRIBUTECOLOR_H

#include <LeMonADE/feature/Feature.h>
#include <LeMonADE/utility/Vector3D.h>
#include <LeMonADE/feature/FeatureChangeAttributes.h>
#include <map>


/*****************************************************************************/
/**
 * @class FeatureAttributeColor
 *
 * @brief 
 * */
/*****************************************************************************/
class FeatureAttributeColor: public Feature {

  
public:
    typedef LOKI_TYPELIST_1( FeatureChangeAttributes<>) required_features_front;
  
  FeatureAttributeColor ():SyncAttributeColorON(false){};
  
  inline bool syncAttributeColorON() const { return SyncAttributeColorON; }
  
  inline void setSyncAttributeColor(bool SyncAttributeColorON_){SyncAttributeColorON=SyncAttributeColorON_;}
  
  inline void addAttributeColor(uint32_t attribute, VectorFloat3 color) {AttributeColor[attribute] = color; }
  inline void addAttributeColor(uint32_t attribute, float red , float green , float  blue) {AttributeColor.at(attribute) = VectorFloat3(red,green,blue); }
  
  inline VectorFloat3 getAttributeColor(uint32_t attribute)
  { 
    if ( (AttributeColor.find(attribute)!= AttributeColor.end()) )
      return AttributeColor[attribute];
    else 
      return VectorFloat3(0.5f,0.5f,0.5f);
  }
  
private: 
  
  //!if true: then update the attribute color before each drawing
  bool SyncAttributeColorON; 
  
  //! key=attribute, value=color 
  std::map<uint32_t, VectorFloat3> AttributeColor;
};



#endif /* LEMONADE_VIEWER_FEATUREATTRIBUTECOLOR_H */